# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QAbstractItemView, QTableWidgetItem, QMessageBox
from service import service


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(620, 480)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(30, 19, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(119, 20, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(350, 20, 75, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(430, 20, 75, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_2.setGeometry(QtCore.QRect(119, 60, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(30, 60, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(510, 20, 75, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.checkBox = QtWidgets.QCheckBox(Dialog)
        self.checkBox.setGeometry(QtCore.QRect(350, 60, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.checkBox.setFont(font)
        self.checkBox.setObjectName("checkBox")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(510, 60, 75, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(30, 100, 561, 371))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        """"""
        self.data_init()  # 初始化数据
        self.tableWidget.itemClicked.connect(self.itemClick)
        self.pushButton_4.clicked.connect(self.update_data)  # 更新数据库
        self.pushButton_2.clicked.connect(self.delete_data)  # 删除选中数据行
        self.pushButton_3.clicked.connect(self.append_data)  # 添加数据
        self.pushButton.clicked.connect(self.query_data)  # 查询
        """"""
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def data_init(self, data_list=None):
        header_list = ['id', '演员名', '影片名', '是否已下载']
        self.tableWidget.setColumnCount(4)  # 设置列的数量
        self.tableWidget.setHorizontalHeaderLabels(header_list)  # 设置表头
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)  # 设置禁止编辑
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)  # 整行选中的方式
        # self.tableWidget.resizeRowsToContents()  # 自适应
        self.tableWidget.resizeColumnToContents(0)
        widthlist = self.tableWidget.horizontalHeader()
        widthlist.setStyleSheet(
            "QHeaderView::section{border:0px;background-color:#f2f1f7;color:#7f7f7f;}")  # 设置颜色
        widthlist.resizeSection(0, 20)  # 设置列宽 0 代表列数
        widthlist.resizeSection(1, 200)
        widthlist.resizeSection(2, 240)
        widthlist.resizeSection(3, 20)
        widthlist.setStretchLastSection(True)
        print(data_list)
        if data_list is None:
            result = service.query("select * from movie")
        else:
            result = data_list

        if len(result) > 0:
            self.tableWidget.setRowCount(len(result))
            for i in range(len(result)):
                for j in range(len(result[i])):
                    self.tableWidget.setItem(i, j, QTableWidgetItem(str(result[i][j])))  # 将文本设置到item上
                    self.tableWidget.item(i, j).setTextAlignment(Qt.AlignCenter | Qt.AlignVCenter)  # 设置文本居中对齐

    def query_data(self):
        if ui.lineEdit.text() !="":
            result = service.query("select * from movie where actor_name=%s",self.lineEdit.text())
        else:
            result = service.query("select * from movie")
        self.data_init(result)

    def delete_data(self):
        row_count = self.tableWidget.currentRow()
        if row_count != -1:
            if service.exec(f"delete from movie where movie_name=%s", self.tableWidget.item(row_count, 2).text()):
                self.tableWidget.removeRow(row_count)
                self.data_init()
                QMessageBox.information(None, '删除成功', '欢迎使用！', QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '删除失败', '请正确选择！', QMessageBox.Ok)
        else:
            QMessageBox.warning(None, '删除失败', '请先选中要删除的表格内容！', QMessageBox.Ok)

    def append_data(self):  # 添加用户数据
        if self.lineEdit.text() != "" and self.lineEdit_2.text() != "":
            result = service.query("select movie_name from movie where movie_name=%s", self.lineEdit_2.text())
            if len(result) > 0:
                QMessageBox.warning(None, '添加失败', '已存在该影片！', QMessageBox.Ok)
            else:
                if service.exec(
                        "insert into movie(actor_name,movie_name,is_downloaded) values (%s,%s,%s)",
                        (self.lineEdit.text(), self.lineEdit_2.text(), 1 if self.checkBox.isChecked() else 0
                         )):
                    QMessageBox.information(None, '添加成功', '欢迎使用', QMessageBox.Ok)
                    self.data_init()
        else:
            QMessageBox.warning(None, '添加失败', '演员名,影片名不能为空！', QMessageBox.Ok)

    def itemClick(self, item_text):
        self.lineEdit.setText(self.tableWidget.item(item_text.row(), 1).text())  # 设置演员名
        self.lineEdit_2.setText(self.tableWidget.item(item_text.row(), 2).text())  # 设置影片名
        if self.tableWidget.item(item_text.row(), 3).text() == "0":
            self.checkBox.setChecked(False)  # 设置是否勾选
        else:
            self.checkBox.setChecked(True)

    def update_data(self):  # 数据更新
        result = service.query("select movie_name from movie where movie_name=%s", self.lineEdit_2.text())
        if len(result) == 0:
            QMessageBox.warning(None, '更新失败', '请确认是否存在该影片!!!', QMessageBox.Ok)
            return
        if service.exec(f"update movie set actor_name=%s,movie_name=%s,is_downloaded=%s where movie_name=%s",
                        (self.lineEdit.text(), self.lineEdit_2.text(), 1 if self.checkBox.isChecked() else 0,
                         self.lineEdit_2.text())):
            QMessageBox.information(None, '更新成功', '欢迎使用！', QMessageBox.Ok)
        self.data_init()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "分类管理"))
        self.label.setText(_translate("Dialog", "演员名:"))
        self.lineEdit.setPlaceholderText(_translate("Dialog", "查询必填"))
        self.pushButton.setText(_translate("Dialog", "查询"))
        self.pushButton_2.setText(_translate("Dialog", "删除"))
        self.lineEdit_2.setPlaceholderText(_translate("Dialog", "添加必填"))
        self.label_2.setText(_translate("Dialog", "影片名:"))
        self.pushButton_3.setText(_translate("Dialog", "添加"))
        self.checkBox.setText(_translate("Dialog", "是否已下载"))
        self.pushButton_4.setText(_translate("Dialog", "修改"))


import sys

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Dialog()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
